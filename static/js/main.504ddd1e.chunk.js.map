{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Calculator","state","count","keys","input","buttonType","number","calcInput","setState","prevState","eval","join","className","this","map","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+4CAGMA,W,ouBACJC,MAAQ,CACNC,MAAO,GACPC,KAAM,CACJ,CAAEC,MAAO,QAASC,WAAY,YAC9B,CAAED,MAAO,IAAKC,WAAY,eAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,eAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,eAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,eAC1B,CAAED,MAAO,IAAKC,WAAY,aAC1B,CAAED,MAAO,IAAKC,WAAY,W,MAG9BC,OAAS,SAAAC,WACW,UAAdA,UACF,MAAKC,SAAS,CAAEN,MAAO,KACA,MAAdK,UACT,MAAKC,SAAS,SAAAC,WAAS,MAAK,CAC1BP,MAAO,CAACQ,KAAKD,UAAUP,MAAMS,KAAK,SAGpC,MAAKH,SAAS,SAAAC,GAAS,MAAK,CAC1BP,MAAM,GAAD,yJAAMO,EAAUP,OAAhB,CAAuBK,gB,0WAIxB,IAAD,OACP,OACE,kEAAKK,UAAU,QACb,kEAAKA,UAAU,OACb,wEAAKC,KAAKZ,MAAMC,MAAhB,MAEF,kEAAKU,UAAU,kBACb,kEAAKA,UAAU,WACZC,KAAKZ,MAAME,KAAKW,IAAI,SAAAC,GACnB,OACE,qEACEH,UAAWG,EAAIV,WACfW,QAAS,kBAAM,EAAKV,OAAOS,EAAIX,SAE9BW,EAAIX,gB,YAjDEa,6CAAMC,WA2DhBlB,kC,sKClDKmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.504ddd1e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Calculator extends React.Component {\n  state = {\n    count: [],\n    keys: [\n      { input: \"clear\", buttonType: \"clearBtn\" },\n      { input: \"/\", buttonType: \"operatorBtn\" },\n      { input: \"7\", buttonType: \"numberBtn\" },\n      { input: \"8\", buttonType: \"numberBtn\" },\n      { input: \"9\", buttonType: \"numberBtn\" },\n      { input: \"*\", buttonType: \"operatorBtn\" },\n      { input: \"4\", buttonType: \"numberBtn\" },\n      { input: \"5\", buttonType: \"numberBtn\" },\n      { input: \"6\", buttonType: \"numberBtn\" },\n      { input: \"-\", buttonType: \"operatorBtn\" },\n      { input: \"1\", buttonType: \"numberBtn\" },\n      { input: \"2\", buttonType: \"numberBtn\" },\n      { input: \"3\", buttonType: \"numberBtn\" },\n      { input: \"+\", buttonType: \"operatorBtn\" },\n      { input: \"0\", buttonType: \"numberBtn\" },\n      { input: \"=\", buttonType: \"eqBtn\" }\n    ]\n  }\n  number = calcInput => {\n    if (calcInput === \"clear\") {\n      this.setState({ count: [] })\n    } else if (calcInput === \"=\") {\n      this.setState(prevState => ({\n        count: [eval(prevState.count.join(\"\"))]\n      }))\n    } else {\n      this.setState(prevState => ({\n        count: [...prevState.count, calcInput]\n      }))\n    }\n  }\n  render() {\n    return (\n      <div className=\"calc\">\n        <div className=\"row\">\n          <p> {this.state.count} </p>\n        </div>\n        <div className=\"buttonsWrapper\">\n          <div className=\"buttons\">\n            {this.state.keys.map(key => {\n              return (\n                <button\n                  className={key.buttonType}\n                  onClick={() => this.number(key.input)}\n                >\n                  {key.input}\n                </button>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Calculator; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}